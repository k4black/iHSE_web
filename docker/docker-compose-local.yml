version: '3.7'

services:
    # Nginx server for static frontend 
    nginx:        
        build:
            context: ./nginx/
            dockerfile: nginx_local.dockerfile
        container_name: nginx_docker_local
        restart: unless-stopped
        ports:
            - 80:80
            - 443:443
        volumes:
            - ../frontend/:/var/app/frontend/
            - ../local_run/log/nginx:/var/log/nginx/
        depends_on:
            - uwsgi

    # uWSGI server for backend 
    uwsgi:
        build:
            context: ./uwsgi/
            dockerfile: uwsgi.dockerfile
        container_name: uwsgi_docker
        restart: unless-stopped
        volumes:
            - ../backend/:/var/app/backend/
            - ../local_run/conf/ihse.ini:/var/conf/ihse.ini
            - ../local_run/log/uwsgi:/var/log/uwsgi
        depends_on:
            - database

    # PostgreSQL server for backend
    # TODO
    database:
        image: postgres:12.1
#        build:
#            context: ./postgres
#            dockerfile: postgres.dockerfile
        container_name: database_docker
        restart: unless-stopped
        ports:
            - 5432:5432
        volumes:
            - ../local_run/postgres/data:/var/lib/postgresql/data/pgdata
            - ../local_run/postgres/exports:/var/lib/postgresql/exports/
            - ./postgres/templates/example.sql:/docker-entrypoint-initdb.d/example.sql  # Change for others docker-compose
        environment:
            POSTGRES_DB: ihse
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: root
            PGDATA: /var/lib/postgresql/data/pgdata

    filebeat:
        build:
            context: ./filebeat
            dockerfile: filebeat.dockerfile
        container_name: filebeat_docker
        restart: unless-stopped
        volumes:
            - /var/lib/docker/containers:/root/logs/containers
            - /var/run/docker.sock:/var/run/docker.sock
            - ../local_run/log/nginx:/root/logs/nginx
        depends_on:
            - nginx

    elasticsearch:
        image: elasticsearch:7.7.0
        container_name: elasticsearch_docker
        restart: unless-stopped
        volumes:
            - ../local_run/elasticsearch/:/usr/share/elasticsearch/data/
            - ../local_run/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
        environment:
            - discovery.type=single-node

    kibana:
        image: kibana:7.7.0
        container_name: kibana_docker
        restart: unless-stopped
        volumes:
            - ../local_run/conf/kibana.yml:/usr/share/kibana/config/kibana.yml
        ports:
            - 5601:5601


#
#    metricbeat:
#        image: docker.elastic.co/beats/metricbeat:7.6.0
#        # https://github.com/docker/swarmkit/issues/1951
#        hostname: "{{.Node.Hostname}}-metricbeat"
#        user: root
#        container_name: metricbeat_docker
#        configs:
#            - source: mb_config
#              target: /usr/share/metricbeat/metricbeat.yml
#        volumes:
#            - /proc:/hostfs/proc:ro
#            - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
#            - /:/hostfs:ro
#            - /var/run/docker.sock:/var/run/docker.sock
#            - ../local_run/tmp/metricbeat:/usr/share/metricbeat/data
#        environment:
#            - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST:-node1}
#            - KIBANA_HOST=${KIBANA_HOST:-node1}
#            - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-elastic}
#            - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-changeme}
#        # disable strict permission checks
#        command: ["--strict.perms=false", "-system.hostfs=/hostfs"]
#        links:
#            - elk
#        depends_on:
#            - elk
